name: ECS Fargate Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Configure AWS Credentials (before ECR login!)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      # 4. Log in to Amazon ECR (optional backup)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 5. Build & Push Docker Image
      - name: Build and Push Docker Images
        run: |
          DOCKERHUB_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/python_flask
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=python_flask
          VERSION=${{ github.sha }}

          # Build image with both registries
          docker build -t $DOCKERHUB_IMAGE:$VERSION -t $DOCKERHUB_IMAGE:latest \
                       -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push to DockerHub (primary)
          docker push $DOCKERHUB_IMAGE:$VERSION
          docker push $DOCKERHUB_IMAGE:latest

          # Push to ECR (backup only)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 6. Install Node.js & AWS CDK
      - name: Install Node.js & AWS CDK
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          npm install -g aws-cdk

      # 7. Deploy using CDK
      - name: CDK Deploy
        run: |
          pip install --user -r requirements.txt
          cdk deploy --app "python cdk/app.py" --require-approval never
